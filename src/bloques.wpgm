import wollok.game.*

object capy {
  var property position = game.origin()
  var impactoEnLaHuellaDeCarbonoTotal = 0 
  method recolectarBasura(basura){
    game.removeVisual(basura)
    game.say(self, "Recolecté: barril de " + basura.nombre())
    basura.impactoEnLaHuellaDeCarbono()
  }
  method tratar(){
    impactoEnLaHuellaDeCarbonoTotal = (impactoEnLaHuellaDeCarbonoTotal - 20).max(0)
  }
  method impactoEnLaHuellaDeCarbono() = impactoEnLaHuellaDeCarbonoTotal
  
  method image() = "capy_tranqui.png"
  
  
}

object posicionAleatoria {
  method calcular() = game.at(
    0.randomUpTo(game.width()).truncate(0),
    0.randomUpTo(game.width()).truncate(0)
  )
}

object lataDeCerveza {
  var property position = posicionAleatoria.calcular()
  var property longitudCm = 10
  
  method impactoEnLaHuellaDeCarbono() = 5 * longitudCm
  method nombre() = "lata_roja"
  method image() = self.nombre() + ".png"


  method esReciclable() = true
  
  method tratar() {
    longitudCm *= 0.9
  }
  
  method colisionarCon(capy) {
    capy.basuraRecolectada(self)
    game.removeVisual(self)
    game.say(capy, "Recolecté: lata de cerveza")
  }
}

object botellaDeGaseosa {
  var impactoEnHuellaDeCarbono = 100
  var property position = posicionAleatoria.calcular()
  
  method impactoEnLaHuellaDeCarbono() = impactoEnHuellaDeCarbono

  method nombre() = "lata_naranja"

  method image() = self.nombre() + ".png"  

  method esReciclable() = true
  
  method tratar() {
    impactoEnHuellaDeCarbono -= 5
  }
  
  method colisionarCon(capy) {
    capy.basuraRecolectada(self)
    game.removeVisual(self)
    game.say(capy, "Recolecté: botella de gaseosa")
  }
}

object barrilDeCombustible {
  var property position = posicionAleatoria.calcular()
  var combustibleActual = biogas
  var combustibleAnterior = gasoil
  
  method impactoEnLaHuellaDeCarbono() = combustibleActual.consumo()
  
  method esReciclable() = false
  method nombre() =  "barril"
  method image() = self.nombre() + "_" + combustibleActual.sufijo() + ".png"

  method cambiarCombustible() {
    const aux = combustibleActual
    combustibleActual = combustibleAnterior
    combustibleAnterior = aux
  }
  
  method combustibleActual() = combustibleActual
  
  method colisionarCon(capy) {
    capy.basuraRecolectada(self)
    game.removeTickEvent("cambiarCombustible")
  }
}

object plantaDeTratamiento {
  var property position = game.at(8, 8)
  
  method image() = "planta.png"

  
  method colisionarCon(capy) {
      capy.tratar(self)
      game.schedule(2000, { 
        game.say(capy, "Aprieta H para saber el impacto en la huella de carbono de la basura que recolectaste")
      })

  }
}
object petroleo {
  method consumo() = 1200
  
  method sufijo() = "petroleo"
}

object biogas {
  /* el biogas es el resultado de la degradación
  de materia degradable, así que en si es una forma de reciclar */
  method consumo() = 0
  
  method sufijo() = "biogas"
}

object gasoil {
  var pureza = 0.4
  
  method pureza(porentaje) {
    pureza = porentaje
  }
  
  method consumo() = 500 * pureza
  
  method sufijo() = "gasoil"
}



program ejemplo {
  game.boardGround("humedal.png")
  game.width(10)
  game.height(10)
  game.addVisual(botellaDeGaseosa)
  game.addVisual(lataDeCerveza)
  game.addVisual(barrilDeCombustible)
  game.addVisual(plantaDeTratamiento)
  game.addVisualCharacter(capy)
  
  game.onCollideDo(capy, { elemento =>
    elemento.colisionarCon(capy)
  })
  
  // Cambiar combustible cada 5 segundos
  game.onTick(5000, "cambiarCombustible", {
    barrilDeCombustible.cambiarCombustible()
    game.say(capy, "El barril ahora tiene: " + barrilDeCombustible.combustibleActual().sufijo() )
  })
  // Agregar una basura que recorra la pantalla de lado a lado.
  // Que pueda colisionar con capy y que sea recolecta por este.
  // Agregar cosas nuevas 

  keyboard.h().onPressDo(
    {
      game.schedule(2000,{ 
      game.say(capy,"Tu huella de carbono es: "+ capy.impactoEnLaHuellaDeCarbono() )

        })
        }
  )
  game.start()
}